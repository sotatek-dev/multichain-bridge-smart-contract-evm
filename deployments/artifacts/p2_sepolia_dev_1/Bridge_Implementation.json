{
  "address": " r",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "ChangeMaxAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "ChangeMinAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "ChangeMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "ChangeThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "receipt",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelist",
          "type": "bool"
        }
      ],
      "name": "SetWhitelistToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UNLOCK_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_digest",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "_getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        }
      ],
      "name": "addListValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "changeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newThreshold",
          "type": "uint256"
        }
      ],
      "name": "changeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "hash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "getUnlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_unlockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalSig",
          "type": "uint256"
        }
      ],
      "name": "isValidThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "receipt",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "setMaxAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "setMinAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "setMinMaxAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelist",
          "type": "bool"
        }
      ],
      "name": "setWhitelistToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "threshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "hash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "_signatures",
          "type": "bytes[]"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "unlockHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcda91c0e3f63e6ba40840b9d0e224ffff16db3098a9d064be4e6cfb42241c9d2",
  "receipt": {
    "to": null,
    "from": "0xb71cA31a396A6E7cD245D00984C1fD79717D7e55",
    "contractAddress": "0xCE42892A8067ddfe359B0594808a13ed0079B973",
    "transactionIndex": 120,
    "gasUsed": "2285794",
    "logsBloom": "0x
    "blockHash": "0x6433b2635f898aa85dd4e403bcf94017a080e511d7c874b5b783acc10739c522",
    "transactionHash": "0xcda91c0e3f63e6ba40840b9d0e224ffff16db3098a9d064be4e6cfb42241c9d2",
    "logs": [],
    "blockNumber": 7357470,
    "cumulativeGasUsed": "14716269",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "edbb95705d1cc326970c5e7f52681653",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"ChangeMaxAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"ChangeMinAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"ChangeMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ChangeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receipt\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"SetWhitelistToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNLOCK_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_digest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"_getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"name\":\"addListValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newThreshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getUnlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_unlockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSig\",\"type\":\"uint256\"}],\"name\":\"isValidThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receipt\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMinMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"unlockHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb4f03ee8b6787bd8d9dc68fb842c1e7782c763f0851a98249e6f441e2c680984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract Bridge is OwnableUpgradeable, ReentrancyGuardUpgradeable, EIP712Upgradeable {\\n\\n    bytes32 public constant UNLOCK_HASH = keccak256(\\n        \\\"UNLOCK(address token,uint256 amount,address user,string hash,uint256 fee)\\\"\\n    );\\n\\n    address public minter;\\n    mapping(address => bool) public whitelistTokens;\\n    mapping(string => bool) public unlockHash;\\n    uint256 public maxAmount;\\n    uint256 public minAmount;\\n    uint256 public threshold;\\n    mapping(address => bool) public validators;\\n\\n    event Lock(address locker, string receipt, address token, uint256 amount, string tokenName);\\n    event Unlock(address user, address token, uint256 amount, string hash, uint256 fee);\\n    event ChangeMinter(address minter);\\n    event ChangeMinAmount(uint256 minAmount);\\n    event ChangeThreshold(uint256 newThreshold);\\n    event ChangeMaxAmount(uint256 maxAmount);\\n    event SetWhitelistToken(address token, bool whitelist);\\n\\n    modifier onlyMinter() {\\n        require(minter == msg.sender, \\\"Bridge: Only Minter\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _minter,\\n        uint256 _minAmount,\\n        uint256 _maxAmount,\\n        address[] memory _validators,\\n        uint256 _threshold\\n    ) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __EIP712_init(\\\"MinaBridge\\\", \\\"1.0.0\\\");\\n        minter = _minter;\\n        minAmount = _minAmount;\\n        maxAmount = _maxAmount;\\n        for (uint256 i = 0; i < _validators.length; ++i) {\\n            validators[_validators[i]] = true;\\n        }\\n        threshold = _threshold;\\n        whitelistTokens[address(0)] = true;\\n        emit ChangeMinter(minter);\\n    }\\n\\n    function isValidThreshold(uint256 totalSig) public view returns (bool) {\\n        if (totalSig  >= threshold) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _getSigner(bytes32 _digest, bytes memory _signature) public view returns (address) {\\n        return ECDSA.recover(_digest, _signature);\\n    }\\n\\n    function getUnlockHash(\\n        address token,\\n        uint256 amount,\\n        address user,\\n        string memory hash,\\n        uint256 fee\\n    ) public view returns (bytes32 _unlockHash) {\\n        _unlockHash = _hashTypedDataV4(keccak256(abi.encode(UNLOCK_HASH, token, amount, user, keccak256(abi.encodePacked(hash)), fee)));\\n    }\\n\\n    function _addListValidator(address[] memory _validators) internal {\\n        require(_validators.length > 0, \\\"Invalid length\\\");\\n        for (uint256 i = 0; i < _validators.length; i++) {\\n            validators[_validators[i]] = true;\\n        }\\n    }\\n\\n    function lock(address token, string memory receipt, uint256 amount) public payable {\\n        require(whitelistTokens[token], \\\"Bridge: token must be in whitelist\\\");\\n        require(amount <= maxAmount && amount >= minAmount, \\\"Bridge: invalid amount\\\");\\n        string memory name = \\\"ETH\\\";\\n        if (token == address(0)) {\\n            require(msg.value == amount, \\\"Bridge: invalid amount\\\");\\n        } else {\\n            IERC20(token).transferFrom(msg.sender, address(this), amount);\\n            name = IERC20(token).name();\\n        }\\n        emit Lock(msg.sender, receipt, token, amount, name);\\n    }\\n\\n\\n    function unlock(address token, uint256 amount, address user, string memory hash, uint256 fee, bytes[] memory _signatures) public onlyMinter nonReentrant {\\n        require(whitelistTokens[token], \\\"Bridge: token must be in whitelist\\\");\\n        require(!unlockHash[hash], \\\"Bridge: Unlocked before\\\");\\n        require(isValidThreshold(_signatures.length), \\\"Signature: Invalid Length\\\");\\n\\n        bytes32 _unlockHash = getUnlockHash(token, amount, user, hash, fee);\\n\\n        address[1000] memory listValidatorsSigned;\\n        for (uint256 i = 0; i < _signatures.length; i++) {\\n            bytes memory _signature = _signatures[i];\\n            address signer = _getSigner(_unlockHash, _signature);\\n            require(validators[signer], \\\"Invalid signature\\\");\\n            for (uint256 j = 0; j < listValidatorsSigned.length; j++) {\\n                if (listValidatorsSigned[j] == signer) {\\n                    require(false, \\\"Invalid Signature Length\\\");\\n                }\\n            }\\n            listValidatorsSigned[i] = signer;\\n        }\\n\\n        unlockHash[hash] = true;\\n        if (token == address(0)) {\\n            require(address(this).balance >= amount, \\\"Bridge: invalid amount\\\");\\n            payable(user).transfer(amount - fee);\\n            payable(owner()).transfer(fee);\\n\\n        } else {\\n            require(IERC20(token).balanceOf(address(this)) >= amount, \\\"Bridge: Invalid amount\\\");\\n            IERC20(token).transfer(user, amount - fee);\\n            IERC20(token).transfer(owner(), fee);\\n\\n        }\\n        emit Unlock(user, token, amount - fee, hash, fee);\\n    }\\n\\n//    ------------ADMIN FUNCTIONS--------------------------------\\n    function changeMinter(address _minter) public onlyOwner {\\n        minter = _minter;\\n        emit ChangeMinter(minter);\\n    }\\n\\n    function setWhitelistToken(address token, bool whitelist) public onlyOwner {\\n        whitelistTokens[token] = whitelist;\\n        emit SetWhitelistToken(token, whitelist);\\n    }\\n\\n    function setMinAmount(uint256 min) public onlyOwner {\\n        require(min <= maxAmount, \\\"Invalid minAmount\\\");\\n        minAmount = min;\\n        emit ChangeMinAmount(minAmount);\\n    }\\n\\n    function setMaxAmount(uint256 max) public onlyOwner {\\n        require(max >= minAmount, \\\"Invalid minAmount\\\");\\n        maxAmount = max;\\n        emit ChangeMaxAmount(maxAmount);\\n    }\\n\\n    function setMinMaxAmount(uint256 min, uint256 max) public onlyOwner {\\n        require(max >= min, \\\"Invalid minAmount\\\");\\n        maxAmount = max;\\n        minAmount = min;\\n    }\\n\\n    function withdrawETH(uint256 amount) public onlyOwner {\\n        require(address(this).balance >= amount, \\\"Bridge: insufficient balance\\\");\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function changeThreshold(uint256 _newThreshold) external onlyOwner() {\\n        threshold = _newThreshold;\\n        emit ChangeThreshold(_newThreshold);\\n    }\\n\\n    function addListValidator(address[] memory _validators) external onlyOwner {\\n        _addListValidator(_validators);\\n    }\\n}\\n\",\"keccak256\":\"0xf26c119be424bbd333934a641d0b0c0f8de28158b9d7058aeb6344959be23583\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061286c806100206000396000f3fe6080604052600436106101965760003560e01c806379b4cdad116100e1578063cc6e5c0c1161008a578063eb74de1e11610064578063eb74de1e1461047f578063f14210a61461049f578063f2fde38b146104bf578063fa52c7d8146104df57600080fd5b8063cc6e5c0c1461041f578063d02c5b461461043f578063d55a76d61461045f57600080fd5b80638da5cb5b116100bb5780638da5cb5b146103b05780639b2cb5d8146103ce578063c30f4823146103e457600080fd5b806379b4cdad146103505780637c374f9914610370578063897b06371461039057600080fd5b80634fe47f70116101435780635fb2386e1161011d5780635fb2386e146102db578063694e80c31461031b578063715018a61461033b57600080fd5b80634fe47f701461028557806354b6ba24146102a55780635f48f393146102c557600080fd5b80632d84c3e8116101745780632d84c3e81461023c57806338e611b31461025c57806342cde4e81461026f57600080fd5b8063075461721461019b57806309e75a16146101d85780632c4d4d181461021a575b600080fd5b3480156101a757600080fd5b5060cb546101bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e457600080fd5b5061020c7f3cee1d988ede3e549baff47c6a9fbc95855d7ffb3c9b566b519126dae0d5a63e81565b6040519081526020016101cf565b34801561022657600080fd5b5061023a610235366004612102565b61050f565b005b34801561024857600080fd5b506101bb6102573660046121e2565b6105be565b61023a61026a366004612229565b6105d1565b34801561027b57600080fd5b5061020c60d05481565b34801561029157600080fd5b5061023a6102a0366004612280565b610846565b3480156102b157600080fd5b5061023a6102c036600461232a565b610909565b3480156102d157600080fd5b5061020c60ce5481565b3480156102e757600080fd5b5061030b6102f6366004612102565b60cc6020526000908152604090205460ff1681565b60405190151581526020016101cf565b34801561032757600080fd5b5061023a610336366004612280565b610b12565b34801561034757600080fd5b5061023a610b8f565b34801561035c57600080fd5b5061030b61036b366004612280565b610be3565b34801561037c57600080fd5b5061023a61038b3660046123a1565b610bfe565b34801561039c57600080fd5b5061023a6103ab366004612280565b610ca9565b3480156103bc57600080fd5b506033546001600160a01b03166101bb565b3480156103da57600080fd5b5061020c60cf5481565b3480156103f057600080fd5b5061030b6103ff3660046123d8565b805160208183018101805160cd8252928201919093012091525460ff1681565b34801561042b57600080fd5b5061020c61043a366004612415565b610d6c565b34801561044b57600080fd5b5061023a61045a366004612473565b610e1b565b34801561046b57600080fd5b5061023a61047a3660046124a8565b610e6f565b34801561048b57600080fd5b5061023a61049a3660046125b1565b611555565b3480156104ab57600080fd5b5061023a6104ba366004612280565b6115e9565b3480156104cb57600080fd5b5061023a6104da366004612102565b6116b2565b3480156104eb57600080fd5b5061030b6104fa366004612102565b60d16020526000908152604090205460ff1681565b6033546001600160a01b0316331461055c5760405162461bcd60e51b8152602060048201819052602482015260008051602061281783398151915260448201526064015b60405180910390fd5b60cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fc87aeafc6e4ae6202adf4f08a76769119ae93cc129c0e0cbac08a118bc18e1ce906020015b60405180910390a150565b60006105ca838361177f565b9392505050565b6001600160a01b038316600090815260cc602052604090205460ff166106445760405162461bcd60e51b815260206004820152602260248201527f4272696467653a20746f6b656e206d75737420626520696e2077686974656c696044820152611cdd60f21b6064820152608401610553565b60ce548111158015610658575060cf548110155b6106a45760405162461bcd60e51b815260206004820152601660248201527f4272696467653a20696e76616c696420616d6f756e74000000000000000000006044820152606401610553565b60408051808201909152600381526208aa8960eb1b60208201526001600160a01b0384166107205781341461071b5760405162461bcd60e51b815260206004820152601660248201527f4272696467653a20696e76616c696420616d6f756e74000000000000000000006044820152606401610553565b610801565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038516906323b872dd906064016020604051808303816000875af1158015610773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079791906125d3565b50836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107fe9190810190612620565b90505b7fdb2afed7fa09277d868c7d909e59f48f8fe738cf8b88268672f81075db44e0a333848685856040516108389594939291906126c3565b60405180910390a150505050565b6033546001600160a01b0316331461088e5760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b60cf548110156108d45760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081b5a5b905b5bdd5b9d607a1b6044820152606401610553565b60ce8190556040518181527f13cad1d1f9bc3464ddf35ddde5e0389a9edf9639f97e2fccb7e59fdeb5dcad22906020016105b3565b600061091560016117a3565b9050801561092d576000805461ff0019166101001790555b6109356118b6565b61093d611929565b6109b16040518060400160405280600a81526020017f4d696e61427269646765000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525061199c565b60cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03881617905560cf85905560ce84905560005b8351811015610a4957600160d16000868481518110610a0757610a07612713565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055610a428161273f565b90506109e6565b5060d08290556000805260cc60209081527f435daec636ce435a90bde0aeec309a303a359a854c5a51b7d6a5a941d6db6094805460ff1916600117905560cb546040516001600160a01b0390911681527fc87aeafc6e4ae6202adf4f08a76769119ae93cc129c0e0cbac08a118bc18e1ce910160405180910390a18015610b0a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6033546001600160a01b03163314610b5a5760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b60d08190556040518181527f9947ac58e204d2da07b9748298663b3b77da7fb0638201d778987ded7c90fbaa906020016105b3565b6033546001600160a01b03163314610bd75760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b610be16000611a11565b565b600060d0548210610bf657506001919050565b506000919050565b6033546001600160a01b03163314610c465760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b6001600160a01b038216600081815260cc6020908152604091829020805460ff19168515159081179091558251938452908301527f0a4552f1105808db6a44587c9ef0a7c4064bf620b9d843b514ad7365bd52239a910160405180910390a15050565b6033546001600160a01b03163314610cf15760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b60ce54811115610d375760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081b5a5b905b5bdd5b9d607a1b6044820152606401610553565b60cf8190556040518181527fbb1711a6693c8a2dfb14b13f0a1468cb1042b91bfe4e3a4b3e3d280aa255ece2906020016105b3565b6000610e117f3cee1d988ede3e549baff47c6a9fbc95855d7ffb3c9b566b519126dae0d5a63e87878787604051602001610da69190612758565b60408051808303601f190181528282528051602091820120908301969096526001600160a01b03948516908201526060810192909252909116608082015260a081019190915260c0810184905260e00160405160208183030381529060405280519060200120611a70565b9695505050505050565b6033546001600160a01b03163314610e635760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b610e6c81611ac4565b50565b60cb546001600160a01b03163314610ec95760405162461bcd60e51b815260206004820152601360248201527f4272696467653a204f6e6c79204d696e746572000000000000000000000000006044820152606401610553565b600260655403610f1b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610553565b60026065556001600160a01b038616600090815260cc602052604090205460ff16610f935760405162461bcd60e51b815260206004820152602260248201527f4272696467653a20746f6b656e206d75737420626520696e2077686974656c696044820152611cdd60f21b6064820152608401610553565b60cd83604051610fa39190612758565b9081526040519081900360200190205460ff16156110035760405162461bcd60e51b815260206004820152601760248201527f4272696467653a20556e6c6f636b6564206265666f72650000000000000000006044820152606401610553565b61100d8151610be3565b6110595760405162461bcd60e51b815260206004820152601960248201527f5369676e61747572653a20496e76616c6964204c656e677468000000000000006044820152606401610553565b60006110688787878787610d6c565b90506110726120cb565b60005b83518110156111e757600084828151811061109257611092612713565b6020026020010151905060006110a885836105be565b6001600160a01b038116600090815260d1602052604090205490915060ff166111135760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610553565b60005b6103e88110156111aa57816001600160a01b031685826103e8811061113d5761113d612713565b60200201516001600160a01b0316036111985760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964205369676e6174757265204c656e67746800000000000000006044820152606401610553565b806111a28161273f565b915050611116565b508084846103e881106111bf576111bf612713565b6001600160a01b039092166020929092020152508190506111df8161273f565b915050611075565b50600160cd866040516111fa9190612758565b908152604051908190036020019020805491151560ff199092169190911790556001600160a01b0388166112f857864710156112785760405162461bcd60e51b815260206004820152601660248201527f4272696467653a20696e76616c696420616d6f756e74000000000000000000006044820152606401610553565b6001600160a01b0386166108fc61128f868a612774565b6040518115909202916000818181858888f193505050501580156112b7573d6000803e3d6000fd5b506033546040516001600160a01b039091169085156108fc029086906000818181858888f193505050501580156112f2573d6000803e3d6000fd5b506114fe565b6040516370a0823160e01b815230600482015287906001600160a01b038a16906370a0823190602401602060405180830381865afa15801561133e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611362919061278b565b10156113b05760405162461bcd60e51b815260206004820152601660248201527f4272696467653a20496e76616c696420616d6f756e74000000000000000000006044820152606401610553565b6001600160a01b03881663a9059cbb876113ca878b612774565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561142d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145191906125d3565b50876001600160a01b031663a9059cbb6114736033546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602481018790526044016020604051808303816000875af11580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc91906125d3565b505b7f7fbd879c56999418e89f051bc4891f2af0bac78cf32eb10b1cf3640ae214358f868961152b878b612774565b888860405161153e9594939291906127a4565b60405180910390a150506001606555505050505050565b6033546001600160a01b0316331461159d5760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b818110156115e15760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081b5a5b905b5bdd5b9d607a1b6044820152606401610553565b60ce5560cf55565b6033546001600160a01b031633146116315760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b804710156116815760405162461bcd60e51b815260206004820152601c60248201527f4272696467653a20696e73756666696369656e742062616c616e6365000000006044820152606401610553565b604051339082156108fc029083906000818181858888f193505050501580156116ae573d6000803e3d6000fd5b5050565b6033546001600160a01b031633146116fa5760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b6001600160a01b0381166117765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610553565b610e6c81611a11565b600080600061178e8585611b7d565b9150915061179b81611beb565b509392505050565b60008054610100900460ff1615611829578160ff1660011480156117c65750303b155b610bf65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610553565b60005460ff8084169116106118975760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610553565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166119215760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b610be1611da1565b600054610100900460ff166119945760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b610be1611e15565b600054610100900460ff16611a075760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b6116ae8282611e87565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611abe611a7d611f0c565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000815111611b155760405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964206c656e6774680000000000000000000000000000000000006044820152606401610553565b60005b81518110156116ae57600160d16000848481518110611b3957611b39612713565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611b758161273f565b915050611b18565b6000808251604103611bb35760208301516040840151606085015160001a611ba787828585611f8c565b94509450505050611be4565b8251604003611bdc5760208301516040840151611bd1868383612079565b935093505050611be4565b506000905060025b9250929050565b6000816004811115611bff57611bff6127e8565b03611c075750565b6001816004811115611c1b57611c1b6127e8565b03611c685760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610553565b6002816004811115611c7c57611c7c6127e8565b03611cc95760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610553565b6003816004811115611cdd57611cdd6127e8565b03611d355760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610553565b6004816004811115611d4957611d496127e8565b03610e6c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610553565b600054610100900460ff16611e0c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b610be133611a11565b600054610100900460ff16611e805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b6001606555565b600054610100900460ff16611ef25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b815160209283012081519190920120609791909155609855565b6000611f877f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611f3b60975490565b6098546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611fc35750600090506003612070565b8460ff16601b14158015611fdb57508460ff16601c14155b15611fec5750600090506004612070565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612040573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661206957600060019250925050612070565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816120af60ff86901c601b6127fe565b90506120bd87828885611f8c565b935093505050935093915050565b60405180617d0001604052806103e8906020820280368337509192915050565b80356001600160a01b03811681146118b157600080fd5b60006020828403121561211457600080fd5b6105ca826120eb565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561215c5761215c61211d565b604052919050565b600067ffffffffffffffff82111561217e5761217e61211d565b50601f01601f191660200190565b600082601f83011261219d57600080fd5b81356121b06121ab82612164565b612133565b8181528460208386010111156121c557600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156121f557600080fd5b82359150602083013567ffffffffffffffff81111561221357600080fd5b61221f8582860161218c565b9150509250929050565b60008060006060848603121561223e57600080fd5b612247846120eb565b9250602084013567ffffffffffffffff81111561226357600080fd5b61226f8682870161218c565b925050604084013590509250925092565b60006020828403121561229257600080fd5b5035919050565b600067ffffffffffffffff8211156122b3576122b361211d565b5060051b60200190565b600082601f8301126122ce57600080fd5b813560206122de6121ab83612299565b82815260059290921b840181019181810190868411156122fd57600080fd5b8286015b8481101561231f57612312816120eb565b8352918301918301612301565b509695505050505050565b600080600080600060a0868803121561234257600080fd5b61234b866120eb565b94506020860135935060408601359250606086013567ffffffffffffffff81111561237557600080fd5b612381888289016122bd565b95989497509295608001359392505050565b8015158114610e6c57600080fd5b600080604083850312156123b457600080fd5b6123bd836120eb565b915060208301356123cd81612393565b809150509250929050565b6000602082840312156123ea57600080fd5b813567ffffffffffffffff81111561240157600080fd5b61240d8482850161218c565b949350505050565b600080600080600060a0868803121561242d57600080fd5b612436866120eb565b94506020860135935061244b604087016120eb565b9250606086013567ffffffffffffffff81111561246757600080fd5b6123818882890161218c565b60006020828403121561248557600080fd5b813567ffffffffffffffff81111561249c57600080fd5b61240d848285016122bd565b60008060008060008060c087890312156124c157600080fd5b6124ca876120eb565b955060208088013595506124e0604089016120eb565b9450606088013567ffffffffffffffff808211156124fd57600080fd5b6125098b838c0161218c565b955060808a0135945060a08a013591508082111561252657600080fd5b818a0191508a601f83011261253a57600080fd5b81356125486121ab82612299565b81815260059190911b8301840190848101908d83111561256757600080fd5b8585015b8381101561259d57848135111561258157600080fd5b6125908f88833589010161218c565b835291860191860161256b565b508096505050505050509295509295509295565b600080604083850312156125c457600080fd5b50508035926020909101359150565b6000602082840312156125e557600080fd5b81516105ca81612393565b60005b8381101561260b5781810151838201526020016125f3565b8381111561261a576000848401525b50505050565b60006020828403121561263257600080fd5b815167ffffffffffffffff81111561264957600080fd5b8201601f8101841361265a57600080fd5b80516126686121ab82612164565b81815285602083850101111561267d57600080fd5b61268e8260208301602086016125f0565b95945050505050565b600081518084526126af8160208601602086016125f0565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835260a060208401526126e660a0840188612697565b818716604085015285606085015283810360808501526127068186612697565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161275157612751612729565b5060010190565b6000825161276a8184602087016125f0565b9190910192915050565b60008282101561278657612786612729565b500390565b60006020828403121561279d57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260a060608301526127d660a0830185612697565b90508260808301529695505050505050565b634e487b7160e01b600052602160045260246000fd5b6000821982111561281157612811612729565b50019056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220a3eaa6dcccecae0f141afb1b564e0765be59cd7e298311ca9e42d7f50f2f080a64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101965760003560e01c806379b4cdad116100e1578063cc6e5c0c1161008a578063eb74de1e11610064578063eb74de1e1461047f578063f14210a61461049f578063f2fde38b146104bf578063fa52c7d8146104df57600080fd5b8063cc6e5c0c1461041f578063d02c5b461461043f578063d55a76d61461045f57600080fd5b80638da5cb5b116100bb5780638da5cb5b146103b05780639b2cb5d8146103ce578063c30f4823146103e457600080fd5b806379b4cdad146103505780637c374f9914610370578063897b06371461039057600080fd5b80634fe47f70116101435780635fb2386e1161011d5780635fb2386e146102db578063694e80c31461031b578063715018a61461033b57600080fd5b80634fe47f701461028557806354b6ba24146102a55780635f48f393146102c557600080fd5b80632d84c3e8116101745780632d84c3e81461023c57806338e611b31461025c57806342cde4e81461026f57600080fd5b8063075461721461019b57806309e75a16146101d85780632c4d4d181461021a575b600080fd5b3480156101a757600080fd5b5060cb546101bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e457600080fd5b5061020c7f3cee1d988ede3e549baff47c6a9fbc95855d7ffb3c9b566b519126dae0d5a63e81565b6040519081526020016101cf565b34801561022657600080fd5b5061023a610235366004612102565b61050f565b005b34801561024857600080fd5b506101bb6102573660046121e2565b6105be565b61023a61026a366004612229565b6105d1565b34801561027b57600080fd5b5061020c60d05481565b34801561029157600080fd5b5061023a6102a0366004612280565b610846565b3480156102b157600080fd5b5061023a6102c036600461232a565b610909565b3480156102d157600080fd5b5061020c60ce5481565b3480156102e757600080fd5b5061030b6102f6366004612102565b60cc6020526000908152604090205460ff1681565b60405190151581526020016101cf565b34801561032757600080fd5b5061023a610336366004612280565b610b12565b34801561034757600080fd5b5061023a610b8f565b34801561035c57600080fd5b5061030b61036b366004612280565b610be3565b34801561037c57600080fd5b5061023a61038b3660046123a1565b610bfe565b34801561039c57600080fd5b5061023a6103ab366004612280565b610ca9565b3480156103bc57600080fd5b506033546001600160a01b03166101bb565b3480156103da57600080fd5b5061020c60cf5481565b3480156103f057600080fd5b5061030b6103ff3660046123d8565b805160208183018101805160cd8252928201919093012091525460ff1681565b34801561042b57600080fd5b5061020c61043a366004612415565b610d6c565b34801561044b57600080fd5b5061023a61045a366004612473565b610e1b565b34801561046b57600080fd5b5061023a61047a3660046124a8565b610e6f565b34801561048b57600080fd5b5061023a61049a3660046125b1565b611555565b3480156104ab57600080fd5b5061023a6104ba366004612280565b6115e9565b3480156104cb57600080fd5b5061023a6104da366004612102565b6116b2565b3480156104eb57600080fd5b5061030b6104fa366004612102565b60d16020526000908152604090205460ff1681565b6033546001600160a01b0316331461055c5760405162461bcd60e51b8152602060048201819052602482015260008051602061281783398151915260448201526064015b60405180910390fd5b60cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fc87aeafc6e4ae6202adf4f08a76769119ae93cc129c0e0cbac08a118bc18e1ce906020015b60405180910390a150565b60006105ca838361177f565b9392505050565b6001600160a01b038316600090815260cc602052604090205460ff166106445760405162461bcd60e51b815260206004820152602260248201527f4272696467653a20746f6b656e206d75737420626520696e2077686974656c696044820152611cdd60f21b6064820152608401610553565b60ce548111158015610658575060cf548110155b6106a45760405162461bcd60e51b815260206004820152601660248201527f4272696467653a20696e76616c696420616d6f756e74000000000000000000006044820152606401610553565b60408051808201909152600381526208aa8960eb1b60208201526001600160a01b0384166107205781341461071b5760405162461bcd60e51b815260206004820152601660248201527f4272696467653a20696e76616c696420616d6f756e74000000000000000000006044820152606401610553565b610801565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038516906323b872dd906064016020604051808303816000875af1158015610773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079791906125d3565b50836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107fe9190810190612620565b90505b7fdb2afed7fa09277d868c7d909e59f48f8fe738cf8b88268672f81075db44e0a333848685856040516108389594939291906126c3565b60405180910390a150505050565b6033546001600160a01b0316331461088e5760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b60cf548110156108d45760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081b5a5b905b5bdd5b9d607a1b6044820152606401610553565b60ce8190556040518181527f13cad1d1f9bc3464ddf35ddde5e0389a9edf9639f97e2fccb7e59fdeb5dcad22906020016105b3565b600061091560016117a3565b9050801561092d576000805461ff0019166101001790555b6109356118b6565b61093d611929565b6109b16040518060400160405280600a81526020017f4d696e61427269646765000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525061199c565b60cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03881617905560cf85905560ce84905560005b8351811015610a4957600160d16000868481518110610a0757610a07612713565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055610a428161273f565b90506109e6565b5060d08290556000805260cc60209081527f435daec636ce435a90bde0aeec309a303a359a854c5a51b7d6a5a941d6db6094805460ff1916600117905560cb546040516001600160a01b0390911681527fc87aeafc6e4ae6202adf4f08a76769119ae93cc129c0e0cbac08a118bc18e1ce910160405180910390a18015610b0a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6033546001600160a01b03163314610b5a5760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b60d08190556040518181527f9947ac58e204d2da07b9748298663b3b77da7fb0638201d778987ded7c90fbaa906020016105b3565b6033546001600160a01b03163314610bd75760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b610be16000611a11565b565b600060d0548210610bf657506001919050565b506000919050565b6033546001600160a01b03163314610c465760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b6001600160a01b038216600081815260cc6020908152604091829020805460ff19168515159081179091558251938452908301527f0a4552f1105808db6a44587c9ef0a7c4064bf620b9d843b514ad7365bd52239a910160405180910390a15050565b6033546001600160a01b03163314610cf15760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b60ce54811115610d375760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081b5a5b905b5bdd5b9d607a1b6044820152606401610553565b60cf8190556040518181527fbb1711a6693c8a2dfb14b13f0a1468cb1042b91bfe4e3a4b3e3d280aa255ece2906020016105b3565b6000610e117f3cee1d988ede3e549baff47c6a9fbc95855d7ffb3c9b566b519126dae0d5a63e87878787604051602001610da69190612758565b60408051808303601f190181528282528051602091820120908301969096526001600160a01b03948516908201526060810192909252909116608082015260a081019190915260c0810184905260e00160405160208183030381529060405280519060200120611a70565b9695505050505050565b6033546001600160a01b03163314610e635760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b610e6c81611ac4565b50565b60cb546001600160a01b03163314610ec95760405162461bcd60e51b815260206004820152601360248201527f4272696467653a204f6e6c79204d696e746572000000000000000000000000006044820152606401610553565b600260655403610f1b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610553565b60026065556001600160a01b038616600090815260cc602052604090205460ff16610f935760405162461bcd60e51b815260206004820152602260248201527f4272696467653a20746f6b656e206d75737420626520696e2077686974656c696044820152611cdd60f21b6064820152608401610553565b60cd83604051610fa39190612758565b9081526040519081900360200190205460ff16156110035760405162461bcd60e51b815260206004820152601760248201527f4272696467653a20556e6c6f636b6564206265666f72650000000000000000006044820152606401610553565b61100d8151610be3565b6110595760405162461bcd60e51b815260206004820152601960248201527f5369676e61747572653a20496e76616c6964204c656e677468000000000000006044820152606401610553565b60006110688787878787610d6c565b90506110726120cb565b60005b83518110156111e757600084828151811061109257611092612713565b6020026020010151905060006110a885836105be565b6001600160a01b038116600090815260d1602052604090205490915060ff166111135760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610553565b60005b6103e88110156111aa57816001600160a01b031685826103e8811061113d5761113d612713565b60200201516001600160a01b0316036111985760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964205369676e6174757265204c656e67746800000000000000006044820152606401610553565b806111a28161273f565b915050611116565b508084846103e881106111bf576111bf612713565b6001600160a01b039092166020929092020152508190506111df8161273f565b915050611075565b50600160cd866040516111fa9190612758565b908152604051908190036020019020805491151560ff199092169190911790556001600160a01b0388166112f857864710156112785760405162461bcd60e51b815260206004820152601660248201527f4272696467653a20696e76616c696420616d6f756e74000000000000000000006044820152606401610553565b6001600160a01b0386166108fc61128f868a612774565b6040518115909202916000818181858888f193505050501580156112b7573d6000803e3d6000fd5b506033546040516001600160a01b039091169085156108fc029086906000818181858888f193505050501580156112f2573d6000803e3d6000fd5b506114fe565b6040516370a0823160e01b815230600482015287906001600160a01b038a16906370a0823190602401602060405180830381865afa15801561133e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611362919061278b565b10156113b05760405162461bcd60e51b815260206004820152601660248201527f4272696467653a20496e76616c696420616d6f756e74000000000000000000006044820152606401610553565b6001600160a01b03881663a9059cbb876113ca878b612774565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561142d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145191906125d3565b50876001600160a01b031663a9059cbb6114736033546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602481018790526044016020604051808303816000875af11580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc91906125d3565b505b7f7fbd879c56999418e89f051bc4891f2af0bac78cf32eb10b1cf3640ae214358f868961152b878b612774565b888860405161153e9594939291906127a4565b60405180910390a150506001606555505050505050565b6033546001600160a01b0316331461159d5760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b818110156115e15760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081b5a5b905b5bdd5b9d607a1b6044820152606401610553565b60ce5560cf55565b6033546001600160a01b031633146116315760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b804710156116815760405162461bcd60e51b815260206004820152601c60248201527f4272696467653a20696e73756666696369656e742062616c616e6365000000006044820152606401610553565b604051339082156108fc029083906000818181858888f193505050501580156116ae573d6000803e3d6000fd5b5050565b6033546001600160a01b031633146116fa5760405162461bcd60e51b815260206004820181905260248201526000805160206128178339815191526044820152606401610553565b6001600160a01b0381166117765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610553565b610e6c81611a11565b600080600061178e8585611b7d565b9150915061179b81611beb565b509392505050565b60008054610100900460ff1615611829578160ff1660011480156117c65750303b155b610bf65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610553565b60005460ff8084169116106118975760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610553565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166119215760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b610be1611da1565b600054610100900460ff166119945760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b610be1611e15565b600054610100900460ff16611a075760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b6116ae8282611e87565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611abe611a7d611f0c565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000815111611b155760405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964206c656e6774680000000000000000000000000000000000006044820152606401610553565b60005b81518110156116ae57600160d16000848481518110611b3957611b39612713565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611b758161273f565b915050611b18565b6000808251604103611bb35760208301516040840151606085015160001a611ba787828585611f8c565b94509450505050611be4565b8251604003611bdc5760208301516040840151611bd1868383612079565b935093505050611be4565b506000905060025b9250929050565b6000816004811115611bff57611bff6127e8565b03611c075750565b6001816004811115611c1b57611c1b6127e8565b03611c685760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610553565b6002816004811115611c7c57611c7c6127e8565b03611cc95760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610553565b6003816004811115611cdd57611cdd6127e8565b03611d355760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610553565b6004816004811115611d4957611d496127e8565b03610e6c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610553565b600054610100900460ff16611e0c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b610be133611a11565b600054610100900460ff16611e805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b6001606555565b600054610100900460ff16611ef25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610553565b815160209283012081519190920120609791909155609855565b6000611f877f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611f3b60975490565b6098546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611fc35750600090506003612070565b8460ff16601b14158015611fdb57508460ff16601c14155b15611fec5750600090506004612070565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612040573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661206957600060019250925050612070565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816120af60ff86901c601b6127fe565b90506120bd87828885611f8c565b935093505050935093915050565b60405180617d0001604052806103e8906020820280368337509192915050565b80356001600160a01b03811681146118b157600080fd5b60006020828403121561211457600080fd5b6105ca826120eb565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561215c5761215c61211d565b604052919050565b600067ffffffffffffffff82111561217e5761217e61211d565b50601f01601f191660200190565b600082601f83011261219d57600080fd5b81356121b06121ab82612164565b612133565b8181528460208386010111156121c557600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156121f557600080fd5b82359150602083013567ffffffffffffffff81111561221357600080fd5b61221f8582860161218c565b9150509250929050565b60008060006060848603121561223e57600080fd5b612247846120eb565b9250602084013567ffffffffffffffff81111561226357600080fd5b61226f8682870161218c565b925050604084013590509250925092565b60006020828403121561229257600080fd5b5035919050565b600067ffffffffffffffff8211156122b3576122b361211d565b5060051b60200190565b600082601f8301126122ce57600080fd5b813560206122de6121ab83612299565b82815260059290921b840181019181810190868411156122fd57600080fd5b8286015b8481101561231f57612312816120eb565b8352918301918301612301565b509695505050505050565b600080600080600060a0868803121561234257600080fd5b61234b866120eb565b94506020860135935060408601359250606086013567ffffffffffffffff81111561237557600080fd5b612381888289016122bd565b95989497509295608001359392505050565b8015158114610e6c57600080fd5b600080604083850312156123b457600080fd5b6123bd836120eb565b915060208301356123cd81612393565b809150509250929050565b6000602082840312156123ea57600080fd5b813567ffffffffffffffff81111561240157600080fd5b61240d8482850161218c565b949350505050565b600080600080600060a0868803121561242d57600080fd5b612436866120eb565b94506020860135935061244b604087016120eb565b9250606086013567ffffffffffffffff81111561246757600080fd5b6123818882890161218c565b60006020828403121561248557600080fd5b813567ffffffffffffffff81111561249c57600080fd5b61240d848285016122bd565b60008060008060008060c087890312156124c157600080fd5b6124ca876120eb565b955060208088013595506124e0604089016120eb565b9450606088013567ffffffffffffffff808211156124fd57600080fd5b6125098b838c0161218c565b955060808a0135945060a08a013591508082111561252657600080fd5b818a0191508a601f83011261253a57600080fd5b81356125486121ab82612299565b81815260059190911b8301840190848101908d83111561256757600080fd5b8585015b8381101561259d57848135111561258157600080fd5b6125908f88833589010161218c565b835291860191860161256b565b508096505050505050509295509295509295565b600080604083850312156125c457600080fd5b50508035926020909101359150565b6000602082840312156125e557600080fd5b81516105ca81612393565b60005b8381101561260b5781810151838201526020016125f3565b8381111561261a576000848401525b50505050565b60006020828403121561263257600080fd5b815167ffffffffffffffff81111561264957600080fd5b8201601f8101841361265a57600080fd5b80516126686121ab82612164565b81815285602083850101111561267d57600080fd5b61268e8260208301602086016125f0565b95945050505050565b600081518084526126af8160208601602086016125f0565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835260a060208401526126e660a0840188612697565b818716604085015285606085015283810360808501526127068186612697565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161275157612751612729565b5060010190565b6000825161276a8184602087016125f0565b9190910192915050565b60008282101561278657612786612729565b500390565b60006020828403121561279d57600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260a060608301526127d660a0830185612697565b90508260808301529695505050505050565b634e487b7160e01b600052602160045260246000fd5b6000821982111561281157612811612729565b50019056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220a3eaa6dcccecae0f141afb1b564e0765be59cd7e298311ca9e42d7f50f2f080a64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 608,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 279,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 323,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1228,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes32"
      },
      {
        "astId": 1230,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      },
      {
        "astId": 1368,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2082,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "minter",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 2086,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "whitelistTokens",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2090,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "unlockHash",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 2092,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "maxAmount",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 2094,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "minAmount",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 2096,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "threshold",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 2100,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "validators",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}